---
"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json"
name: Z#

variables:
  identifier: '[_[:alpha:]][_[:alnum:]]*'

patterns:
- include: '#comment'
- include: '#using-directive'
- include: '#class-declaration'
- include: '#function-declaration'
- include: '#enum-declaration'
# - include: '#template-definition'

repository:

  using-directive:
    patterns:
    - begin: \b(using)\b\s+
      beginCaptures:
        '1': { name: keyword.other.using.zs }
      end: (?=;)
      patterns:
      - include: '#type'
    
  typing:
    name: meta.typing.zs
    begin: (?:(:)\s*)
    beginCaptures:
      '1': { name: punctuation.separator.colon.zs }
    end: (?=[\{\}\n;,])
    patterns:
    - include: '#type'

  type:
    name: meta.type.zs
    patterns:
    - include: '#function-type'
    - include: '#array-type'
    - include: '#unpacked'
    - include: '#unit-type'
    - include: '#type-builtin'
    - include: '#type-name'
    - include: '#enum-name'

  unpacked:
    name: meta.unpacked.zs
    match: ({{identifier}})(\.\.\.)
    captures:
      '1': 
        patterns: 
        - include: '#type'
      '2': {name: punctuation.operator.unpack.zs}

  unit-type:
    name: 'meta.unit.zs'
    match: \(\)

  type-builtin:
    match: \b(string|bool|i8|u8|i16|u16|i32|u32|i64|u64|f32|f64)\b
    captures:
      '1':
        name: keyword.type.zs

  type-name:
    patterns:
    - match: ({{identifier}})\s*(\.)
      captures:
        '1': { name: entity.name.type.zs }
        '2': { name: punctuation.accessor.zs }
    - match: (\.)\s*({{identifier}})
      captures:
        '1': { name: punctuation.accessor.zs }
        '2': { name: entity.name.type.zs }
    - name: entity.name.type.zs
      match: '{{identifier}}'
  
  enum-name:
    name: entity.name.type.enum.zs
    match: '{{identifier}}'

  array-type:
    name: meta.array.zs
    match: ({{identifier}})(\[\])
    captures:
      '1': 
        patterns: 
        - include: '#type'
      '2': {name: punctuation.definition.array.zs}

  function-type-seperator:
    name: punctuation.separator.function-type.zs
    match: '->'

  function-type:
    name: meta.function-type.zs
    begin: ':'
    beginCaptures:
      '0': { name: punctuation.separator.colon.zs }
    end: (?=[\{\n;])
    patterns:
    - include: '#array-type'
    - include: '#unpacked'
    - include: '#unit-type'
    - include: '#type-builtin'
    - include: '#type-name'
    - include: '#enum-name'
    - include: '#function-type-seperator'

  identifier:
    name: 'meta.identifier.zs'
    match: '{{identifier}}'

  literal:
    patterns:
    - include: '#boolean-literal'
    - include: '#numeric-literal'

  expression:
    patterns:
    - include: "#function-call"
    - include: '#expression-operators'
    - include: '#literal'
    - include: '#identifier'

  expression-operators:
    patterns:
    - match: \+|-|\*|\/|\%
      name: keyword.operator.arithmetic.zs

  struct-definition:
    name: meta.struct.zs
    begin: \{
    beginCaptures:
      '0': { name: punctuation.definition.struct.open.zs }
    end: \}
    endCaptures:
      '0': { name: punctuation.definition.struct.close.zs }
    patterns:
      - include: '#comment'
      - include: '#struct-field'

  struct-field:
    begin: ({{identifier}})
    end: (,)|(?=\})
    beginCaptures:
      '1': { name: entity.name.variable.property.zs }
    endCaptures:
      '1': { name: punctuation.separator.comma.zs }
    patterns:
      - include: '#comment'
      - include: '#punctuation-comma'
      - include: '#typing'
      - include: '#struct-field'

  enum-declaration:
    name: meta.enum.zs
    begin: \b(enum)\b\s+
    beginCaptures:
      '1': { name: keyword.other.enum.zs }
    end: (?<=\})
    patterns:
    - include: '#enum-name'
    - begin: \{
      beginCaptures:
        '0': { name: punctuation.definition.enum.open.zs }
      end: \}
      endCaptures:
        '0': { name: punctuation.definition.enum.open.zs }
      patterns:
      - include: '#comment'
      - begin: ({{identifier}})
        beginCaptures:
          '1': { name: variable.other.enummember.zs }
        end: (?=[,\n\}])
        patterns:
        - include: '#struct-definition'

  class-declaration:
    begin: (?=\b(?:\bstatic\s+)?class\b)
    end: (?<=\})
    patterns:
    - begin: |
        (?x)
        (?:\b(static)\s+)?
        \b(class)\b\s+ 
        (?<name>{{identifier}})\s*
        (?:\(\s*(?<metaclass>{{identifier}})\s*\))?
      beginCaptures:
        '1': { name: storage.modifier.class.zs }
        '2': { name: keyword.other.class.zs }
        '3': { name: entity.name.class.zs }
        '4':  
          name: entity.name.meta-class.zs
          patterns: 
          - include: '#type-name'
      end: (?=\{)
      patterns:
      - include: '#comment'
      - include: '#base-types'
    - include: '#class-body'
    
  base-types:
    name: meta.base-types.zs
    begin: ':'
    beginCaptures:
      '0': { name: punctuation.separator.colon.zs }
    end: (?=\{)
    patterns:
    - include: '#type-name'
    - include: '#punctuation-comma'

  class-body:
    name: meta.class.body.zs
    begin: \{
    beginCaptures:
      '0': { name: punctuation.curlybrace.open.zs }
    end: \}
    endCaptures:
      '0': { name: punctuation.curlybrace.close.zs }
    patterns:
    - include: '#comment'
    - include: '#class-member'
  
  class-member:
    patterns:
    - include: '#function-declaration'
    - include: '#property-declaration'
    - include: '#field-declaration'

  field-declaration:
    begin: ({{identifier}})\s*(?=:)
    beginCaptures:
      '1': { name: entity.name.variable.property.zs }
    end: (?<=\;)  
    patterns:
    - include: '#typing'

  property-declaration:
    begin: ({{identifier}})\s*(?=:.*?\{)
    beginCaptures:
      '1': { name: entity.name.variable.property.zs }
    end: (?<=\})  
    patterns:
    - include: '#typing'
    - comment: property-body
      begin: \{
      beginCaptures:
        '0': { name: punctuation.curlybrace.open.zs }
      end: \}
      endCaptures:
        '0': { name: punctuation.curlybrace.close.zs }
      patterns:
      - include: '#comment'
      - include: '#get-property'
      - include: '#set-property'
  
  get-property:
    begin: \b(get)\b
    beginCaptures:
      '1': { name: keyword.other.get.zs }
    end: (?<=\})  
    patterns:
    - include: '#function-body'

  set-property:
    begin: \b(set)\b
    beginCaptures:
      '1': { name: keyword.other.set.zs }
    end: (?<=\})  
    patterns:
    - include: '#function-body'

  punctuation-comma:
    name: punctuation.separator.comma.zs
    match: ','

  comment:
    patterns:
    - name: comment.block.zs
      begin: /\*
      beginCaptures:
        '0': { name: punctuation.definition.comment.zs }
      end: \*/
      endCaptures:
        '0': { name: punctuation.definition.comment.zs }
    - begin: (^\s+)?(?=//)
      beginCaptures:
        '1': { name: punctuation.whitespace.comment.leading.zs }
      end: (?=$)
      patterns:
      - name: comment.block.documentation.zs
        begin: (?<!/)///(?!/)
        beginCaptures:
          '0': { name: punctuation.definition.comment.zs }
        end: (?=$)
      - name: comment.line.double-slash.zs
        begin: (?<!/)//(?:(?!/)|(?=//))
        beginCaptures:
          '0': { name: punctuation.definition.comment.zs }
        end: (?=$)

  namespace-block:
    patterns:
    - include: "#function-declaration"

  keywords:
    patterns:
    - name: keyword.control.flow.zs
      match: \b(if|while|for|return)\b

  function-modifier:
    name: storage.modifier.function.zs
    match: (?<!\.)\b(public|protected|private|static|__entrypoint)\b
  
  parenthesized-parameters:
    name: meta.function.parameters.zs
    begin: \(
    beginCaptures:
      '0': {name: punctuation.definition.parameters.begin.zs}
    end: \)
    endCaptures:
      '0': {name: punctuation.definition.parameters.end.zs}
    patterns:
    - include: '#comment'
    - include: '#parameter'
    - include: '#punctuation-comma'

  parameter:
    match: |
      (?x)
      ({{identifier}})
    captures:
      '1': { name: entity.name.variable.parameter.zs }

  function-declaration:
    begin: |
      (?x)
      ((?:\s*{{identifier}}\s+)*)
      \s*(func)\s+
      ({{identifier}})
    beginCaptures:
      "1": 
        patterns:
          - include: '#function-modifier'
      "2": { name: storage.modifier.zs }
      '3': { name: entity.name.function.zs }
    end: (?<=\})
    patterns:
    - include: '#parenthesized-parameters'
    - include: '#typing'
    - include: '#function-body'

  function-body:
    name: meta.function.body.zs
    begin: \{
    beginCaptures:
      '0': { name: punctuation.curlybrace.open.zs }
    end: \}
    endCaptures:
      '0': { name: punctuation.curlybrace.close.zs }
    patterns:
    - include: '#comment'
    - include: "#return-statement"
    - include: "#IL-block"
    - include: "#expression"

  return-statement:
    begin: \b(return)\b
    beginCaptures:
      '1': { name: keyword.control.flow.return.zs }
    end: (?=[;\n])
    patterns:
    - include: '#expression'

  function-call:
    name: meta.function-call.zs
    begin: |
      (?x)
        \b(?=
          ({{identifier}}) \s* (\()
        )
    end: (?<=\))
    endCaptures:
      '0': {name: punctuation.definition.arguments.end.zs}
    patterns:
      - include: '#function-name'
      - include: '#function-arguments'

  function-name:
    patterns:
      - match: |
          (?x)
            \b ({{identifier}}) \b
        captures:
          '1': { name: entity.name.function.zs }

  function-arguments:
    name: meta.function.arguments.zs
    begin: \(
    beginCaptures:
      '0': {name: punctuation.definition.arguments.begin.zs}
    end: \)
    endCaptures:
      '0': {name: punctuation.definition.arguments.end.zs}
    patterns:
    - include: '#comment'
    - include: '#expression'
    - include: '#punctuation-comma'


  boolean-literal:
    name: constant.language.boolean.zs
    match: \b(true|false)\b

  numeric-literal:
    comment: TODO taken from C# as is. Need to modify.
    match: "(?<!\\w)\\.?\\d(?:(?:[0-9a-zA-Z_\\.]|_)|(?<=[eE])[+-])*"
    captures:
      '0':
        patterns:
        - begin: "(?=.)"
          end: "$"
          patterns:
          # Decimal number (with optional thousands separator) with mandatory decimal part (with optional thousands separator) and optional exponent (also with optional thousands separator)
          - match: "(\\G(?=[0-9.])(?!0[xXbB]))([0-9](?:[0-9]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)?((?:(?<=[0-9])|\\.(?=[0-9])))([0-9](?:[0-9]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)?((?<!_)([eE])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)))?([fFdDmM](?!\\w))?$"
            captures:
              '2':
                name: constant.numeric.decimal.zs
                patterns:
                - match: "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])"
                  name: constant.numeric.other.separator.thousands.zs
              '3':
                name: constant.numeric.other.separator.thousands.zs
              '4':
                name: constant.numeric.other.separator.decimals.zs
              '5':
                name: constant.numeric.decimal.zs
                patterns:
                - match: "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])"
                  name: constant.numeric.other.separator.thousands.zs
              '6':
                name: constant.numeric.other.separator.thousands.zs
              '8':
                name: constant.numeric.other.exponent.zs
              '9':
                name: keyword.operator.arithmetic.zs
              '10':
                name: keyword.operator.arithmetic.zs
              '11':
                name: constant.numeric.decimal.zs
                patterns:
                - match: "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])"
                  name: constant.numeric.other.separator.thousands.zs
              '12':
                name: constant.numeric.other.suffix.zs
          # Binary number (with optional thousands separator)
          - match: "(\\G0[bB])([01_](?:[01_]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)((?:(?:(?:(?:(?:[uU]|[uU]l)|[uU]L)|l[uU]?)|L[uU]?)|[fFdDmM])(?!\\w))?$"
            captures:
              '1':
                name: constant.numeric.other.preffix.binary.zs
              '2':
                name: constant.numeric.binary.zs
                patterns:
                - match: "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])"
                  name: constant.numeric.other.separator.thousands.zs
              '3':
                name: constant.numeric.other.separator.thousands.zs
              '4':
                name: constant.numeric.other.suffix.zs
          # Hexadecimal number (with optional thousands separator)
          - match: "(\\G0[xX])([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)((?:(?:(?:(?:(?:[uU]|[uU]l)|[uU]L)|l[uU]?)|L[uU]?)|[fFdDmM])(?!\\w))?$"
            captures:
              '1':
                name: constant.numeric.other.preffix.hex.zs
              '2':
                name: constant.numeric.hex.zs
                patterns:
                - match: "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])"
                  name: constant.numeric.other.separator.thousands.zs
              '3':
                name: constant.numeric.other.separator.thousands.zs
              '4':
                name: constant.numeric.other.suffix.zs
          # Integral number (with optional thousands separator) with no decimal part and optional exponent (also with optional thousands separator)
          - match: "(\\G(?=[0-9.])(?!0[xXbB]))([0-9](?:[0-9]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)((?<!_)([eE])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)))?((?:(?:(?:(?:(?:[uU]|[uU]l)|[uU]L)|l[uU]?)|L[uU]?)|[fFdDmM])(?!\\w))?$"
            captures:
              '2':
                name: constant.numeric.decimal.zs
                patterns:
                - match: "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])"
                  name: constant.numeric.other.separator.thousands.zs
              '3':
                name: constant.numeric.other.separator.thousands.zs
              '5':
                name: constant.numeric.other.exponent.zs
              '6':
                name: keyword.operator.arithmetic.zs
              '7':
                name: keyword.operator.arithmetic.zs
              '8':
                name: constant.numeric.decimal.zs
                patterns:
                - match: "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])"
                  name: constant.numeric.other.separator.thousands.zs
              '9':
                name: constant.numeric.other.suffix.zs
          # Capture the rest as an invalid numeric literal
          - match: "(?:(?:[0-9a-zA-Z_\\.]|_)|(?<=[eE])[+-])+"
            name: invalid.illegal.constant.numeric.zs

  strings:
    name: string.quoted.double.zs
    begin: "\""
    end: "\""
    patterns:
    - name: constant.character.escape.zs
      match: "\\\\."

  template-definition:
    begin: (?<!\w)(template)(?:(?:\s)+)?(<)
    end: '>'
    beginCaptures:
      1:
        name: storage.type.template.zs
      2:
        name: punctuation.section.angle-brackets.start.template.definition.zs
    endCaptures:
      0:
        name: punctuation.section.angle-brackets.end.template.definition.zs
    name: meta.template.definition.zs
    patterns:
      - begin: (?<=\w)(?:(?:\s)+)?<
        end: '>'
        beginCaptures:
          0:
            name: punctuation.section.angle-brackets.begin.template.call.zs
        endCaptures:
          0:
            name: punctuation.section.angle-brackets.begin.template.call.zs

  IL-block:
    name: meta.embedded.il
    begin: \b(IL)\b\s*(\{)
    beginCaptures:
      '1': { name: storage.modifier.IL-block.zs }
      '2': { name: punctuation.curlybrace.open-IL.zs }
    end: \}
    endCaptures:
      '0': { name: punctuation.curlybrace.close-IL.zs }
    patterns:
    - include: "#IL-code"

  IL-code:
    name: meta.block.il.zs
    patterns:
    - include: "#function-call"
    - include: "#type-name"
    - match: "^\\s*(.assembly|.module|.class|.maxstack|.hash|.method|.imagebase|.stackreserve|.subsystem|.corflags|.publickeytoken|.custom|.entrypoint)\\b"
      name: keyword.control
    - match: "^\\s*([A-Za-z_][A-Za-z_0-9]+:)?\\s*(ret|nop|ldarg.\\d|ldstr|call|ldlen|stloc.\\d|ldloc.\\d|newobj|ldc.i4.\\d)\\b"
      captures:
        '1':
          name: entity.name.tag
        '2':
          name: entity.name.function
    - match: "\\b(public|private|auto|ansi|beforefieldinit|static|hidebysig|specialname|rtspecialname|instance|cil|managed)\\b"
      name: constant.language
    - match: "\\b(void|string)\\b (\\.?.+?\\().*?(\\))"
      captures:
        '1':
          name: keyword.control
        '2':
          name: entity.name.function
        '3':
          name: entity.name.function
    - match: "^\\s*([A-Za-z_][A-Za-z_0-9]+:)?\\s*(br\\.s)\\s+([A-Za-z_][A-Za-z_0-9]+)\\b"
      captures:
        '1':
          name: entity.name.tag.il
        '2':
          name: entity.name.selector
        '3':
          name: entity.name.tag.il
    - begin: "\""
      beginCaptures:
        '0':
          name: string.value.il
      end: "\""
      endCaptures:
        '0':
          name: string.value.il
      name: string.value.il
      patterns:
      - match: \\(NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|[abfnrtv\\\"'\&]|x[0-9a-fA-F]{1,5})
        name: constant.character.escape.il
      - match: "\\^[A-Z@\\[\\]\\\\\\^_]"
        name: constant.character.escape.control.il
    - begin: "//"
      end: "$"
      name: comment.line.double-dash.il

scopeName: source.zs
